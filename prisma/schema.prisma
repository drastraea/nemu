// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String
  password      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  session       Session[]
  items         Item[]
  notifications Notification[]
  @@index([email])
}

model Session {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
}

model Item {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  type        ItemType
  category    String?
  name        String
  timeframe   DateTime?
  location    String?
  latitude    Float?
  longitude   Float?
  rejectItemId  String[] @default([])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  archiveAt     DateTime?
  images      Image[]
  itemTags    ItemTag[]
  
  asLostItem   Match[] @relation("LostItem")
  asFoundItem  Match[] @relation("FoundItem")
  @@index([type, category, timeframe])
}

enum ItemType {
  LOST
  FOUND
}

model Image {
  id        String   @id @default(uuid())
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([itemId])
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  type      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  itemTags  ItemTag[]
  @@index([name])
}

model ItemTag {
  id        String   @id @default(uuid())
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  tagId     String
  tag       Tag      @relation(fields: [tagId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([itemId, tagId])
  @@index([itemId, tagId])
}

enum MatchStatus {
  PENDING
  CONFIRMED
  REJECTED
}

model Match {
  id          String       @id @default(uuid())
  lostItemId  String
  lostItem    Item         @relation("LostItem", fields: [lostItemId], references: [id])
  foundItemId String
  foundItem   Item         @relation("FoundItem", fields: [foundItemId], references: [id])
  score       Float
  status      MatchStatus  @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  notifications Notification[]

  @@unique([lostItemId, foundItemId])
  @@index([lostItemId, foundItemId, status])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  matchId   String
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  message   String
  type      NotificationType @default(GENERAL)
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, matchId, type])
}

enum NotificationType {
  LOST_ITEM
  FOUND_ITEM
  GENERAL
}
